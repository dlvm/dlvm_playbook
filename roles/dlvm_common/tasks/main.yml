---
# This playbook would install dlvm package

- name: Install python3
  include: "{{ansible_distribution}}-{{ansible_distribution_major_version}}.yml"

- name: Create dlvm group
  group:
    name: "{{dlvm_group}}"
    state: present

- name: Create dlvm user
  user:
    name: "{{dlvm_user}}"
    group: "{{dlvm_group}}"
    state: present

- name: Configure sudo
  template:
    src: "{{dlvm_sudo_template}}"
    dest: "{{dlvm_sudo_dest}}"

- name: Create dlvm root dir
  file:
    path: "{{dlvm_root_dir}}"
    state: directory
    recurse: yes

- name: Create dlvm conf path
  file:
    path: "{{dlvm_conf_path}}"
    state: directory
    recurse: yes

- name: Create dlvm log path
  file:
    path: "{{dlvm_log_path}}"
    state: directory
    owner: "{{dlvm_user}}"
    group: "{{dlvm_group}}"
    recurse: yes

- name: Create dlvm var path
  file:
    path: "{{dlvm_var_path}}"
    state: directory
    owner: "{{dlvm_user}}"
    group: "{{dlvm_group}}"
    recurse: yes

- name: Install virtualenv
  pip:
    name: virtualenv
    executable: pip3
    state: present

- name: Copy requirements.txt
  template:
    src: "{{dlvm_requirements_template}}"
    dest: "{{dlvm_root_dir}}/requirements.txt"

- name: Create virtualenv and install dependencies
  pip:
    requirements: "{{dlvm_root_dir}}/requirements.txt"
    virtualenv: "{{dlvm_env_path}}"
    virtualenv_python: "python3.{{python_minor_version}}"
    state: latest

- name: install dlvm
  pip:
    name: "{{dlvm_package}}"
    virtualenv: "{{dlvm_env_path}}"
    state: present
  register: dlvm_package_update

- name: Copy dlvm main configuration file
  template:
    src: "{{dlvm_cfg_template}}"
    dest: "{{dlvm_conf_path}}/dlvm.cfg"
  register: dlvm_cfg_update

- name: Copy dlvm logger configuration file
  template:
    src: "{{dlvm_logger_template}}"
    dest: "{{dlvm_conf_path}}/logger.json"
  register: dlvm_logger_update

- name: Copy celery configuration file
  template:
    src: "{{dlvm_celery_template}}"
    dest: "{{dlvm_conf_path}}/celery.json"
  register: dlvm_celery_update

- name: Copy sqlalchemy configuration file
  template:
    src: "{{dlvm_sqlalchemy_template}}"
    dest: "{{dlvm_conf_path}}sqlalchemy.json"
  register: dlvm_sqlalchemy_update

- name: Init db
  command: "/bin/bash -c 'source {{dlvm_env_path}}/bin/activate; dlvm_init_db'"
  become: yes
  become_user: "{{dlvm_user}}"

- name: Create unify variable for dlvm change
  command: /bin/true
  register: dlvm_update
  when: dlvm_package_update.changed or
        dlvm_cfg_update.changed or
        dlvm_logger_update.changed or
        dlvm_celery_update.changed or
        dlvm_sqlalchemy_update.changed
